<?php
/**
 * This file handles the Base admin functionality and UX/UI.
 * Limit changes to Base Approvied changes to the admin.
 *
 * @file Admin.php
 * @author Timothy Wallis @ DBS>Interactive
 */

namespace Base;

class Admin {

	public $text_domain;

	public function __construct() {
		$this->css_unique_hash = '';
		$this->js_unique_hash = '';

		// Read the css.hash and js.hash files generated by the gulp script.
		// These files are distinct in order to have 2 separate gulp tasks; one
		// for javascript and one for css.
		if ( file_exists( get_stylesheet_directory() . '/library/css/css.hash' ) ) {
			$this->css_unique_hash = '-' . file_get_contents( get_stylesheet_directory() . '/library/css/css.hash' );
		}

		if ( file_exists( get_stylesheet_directory() . '/library/js/js.hash' ) ) {
			$this->js_unique_hash = '-' . file_get_contents( get_stylesheet_directory() . '/library/js/js.hash' );
		}

		if ( APP_MODE === STAGING || APP_MODE === PRODUCTION ) {
			$this->css_file_extension = $this->css_unique_hash . '.min.css';
		} else {
			$this->css_file_extension = '.css';
		}

		$this->actions();
		$this->filters();
		// experimental 2017-07-07 HB
		$this->post_labels();
	}

	public function actions() {
		add_action( 'admin_notices', array( $this, 'synced_data_notice' ) );
		add_action( 'admin_menu', array( $this, 'disable_dashboard_widgets' ) );
		add_action( 'admin_head', array( $this, 'enqueue_admin_styles' ) );
		add_action( 'admin_head', array( $this, 'correct_acf_labels' ) );
		add_action( 'login_enqueue_scripts', array( $this, 'login_css' ), 10 );
		add_action( 'login_footer' , function() { // force 'remember me' checkbox
		?>
		<script>document.getElementById( "rememberme" ).checked = "checked";</script>
		<?php
		});
		/* removes editor from specified pages */
		add_action( 'admin_init', function() {
			$post_id = $_GET['post'] ?? ($_POST['post_ID'] ?? null);
			if ( is_null( $post_id ) ) return;
			// remove editor from sitemap page.
			$ignore_posts_ids = array();
			if ( in_array( $post_id, $ignore_posts_ids ) ) :
				remove_post_type_support('page', 'editor');
				remove_post_type_support('page', 'excerpt');
			endif;
		});
	}

	public function filters() {
		add_filter( 'login_headerurl', array( $this, 'login_url' ) );
		add_filter( 'login_headertext', array( $this, 'login_title' ) );
		add_filter( 'admin_footer_text', array( $this, 'custom_dashboard_footer' ) );
		add_filter( 'tiny_mce_before_init', array( $this, 'init_tiny_mce' ) );
	}


	/**
	 * Disable the default dashboard widgets.
	 * The less that the user can change,
	 * the less that they can break.
	 */
	public function disable_dashboard_widgets() {
		remove_meta_box( 'dashboard_right_now', 'dashboard', 'core' );
		remove_meta_box( 'dashboard_recent_comments', 'dashboard', 'core' );
		remove_meta_box( 'dashboard_incoming_links', 'dashboard', 'core' );
		remove_meta_box( 'dashboard_plugins', 'dashboard', 'core' );

		remove_meta_box( 'dashboard_quick_press', 'dashboard', 'core' );
		remove_meta_box( 'dashboard_recent_drafts', 'dashboard', 'core' );
		remove_meta_box( 'dashboard_primary', 'dashboard', 'core' );
		remove_meta_box( 'dashboard_secondary', 'dashboard', 'core' );

		// removing plugin dashboard boxes
		remove_meta_box( 'yoast_db_widget', 'dashboard', 'normal' );
	}

	/**
	 * Displays Alert on admin dashboard when using live database on staging.
	 */
	public function synced_data_notice() {
		if ( ! IS_LIVE && ! strstr( DB_NAME, 'staging' ) ) {
			echo "<div class='error'><p><strong>" . __( 'STAGING AND LIVE DATABASES ARE LINKED! ANY CHANGES WILL GO LIVE!', $this->text_domain ) . '</strong></p></div>';
		} else {
			return false;
		}
	}

	/**
	 * ACF fix: Corrects the labels in ACF
	 */
	public function correct_acf_labels() {
		?><script>
			jQuery( window ).on( 'load', function() {
				jQuery('.acf-field-setting-fc_layout').each( function( index, layout ) {
					jQuery(layout).find( '.acf-label label' ).first().html( jQuery(layout).find( '.acf-fc-meta-label input' ).first().val() )
				});
			});
		</script><?php
	}

	/**
	 * Sets up custom admin styles.
	 */
	public function enqueue_admin_styles() {
		wp_enqueue_style( 'dbs_admin_css', get_stylesheet_directory_uri() . '/library/css/admin' . $this->css_file_extension, false );
	}

	/**
	 * Sets up login page styles and title.
	 */
	public function login_css() {
		wp_enqueue_style( 'dbs_login_css', get_stylesheet_directory_uri() . '/library/css/login' . $this->css_file_extension, false );
	}

	public function login_url() {
		return home_url();
	}

	public function login_title() {
		return get_option( 'blogname' );
	}

	public function init_tiny_mce( $init ) {
		$default_colors = '
			"ed9148", "Orange",
			"a02184", "Pink",
			"521d7e", "Purple",
			"6a408d", "Alternate Purple",
			"221737", "Dark Purple",
			"a98f79", "Brown",
			"ccb9a9", "Tan",
			"101010", "Black",
			"232224", "Dark Gray",
			"363638", "Charcoal",
			"818181", "Gray 3",
			"a2aaad", "Gray 2",
			"acacac", "Gray 1",
			"e7ebed", "Light Gray",
			"ececec", "Off White",
			"ffffff", "White",
		';
		$init['textcolor_map'] = '[' . $default_colors . ']';
		return $init;
	}

	/**
	 * Adds nice contribution to dashboard.
	 */
	public function custom_dashboard_footer() {
		_e( '<span id="footer-thankyou">Developed by <a href="https://www.dbswebsite.com/" target="_blank">DBS&gt;Interactive</a></span>.', $this->text_domain );
	}

	/**
	* Relabel the default 'post' feature for News, Articles, etc.
	*/
	private function post_labels() {

		add_action( 'init', function() {
			global $wp_post_types, $dbs;
			$labels = &$wp_post_types['post']->labels;
			$labels->name = $dbs->posts_name;
			$labels->singular_name = 'Post';
			$labels->add_new = 'Add Post';
			$labels->add_new_item = 'Add Post';
			$labels->edit_item = 'Edit Posts';
			$labels->new_item = 'Post';
			$labels->view_item = 'View Post';
			$labels->search_items = 'Search Posts';
			$labels->not_found = 'No Posts found';
			$labels->not_found_in_trash = 'No Posts found in Trash';

		});

		add_action( 'admin_menu', function() {
			global $menu, $dbs;
			global $submenu;

			$menu[5][0] = $dbs->posts_name;
			$submenu['edit.php'][5][0] = $dbs->posts_name;
			$submenu['edit.php'][10][0] = 'Create New Post';
//			$submenu['edit.php'][15][0] = 'Status'; // Change name for categories
//			$submenu['edit.php'][16][0] = 'Labels'; // Change name for tags
			echo '';
		});

	}

}

