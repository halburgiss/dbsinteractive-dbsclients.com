#!/bin/bash
#
# post-checkout hook, to run gulp automatically on all pulls and merges.
#
# Should live .git/hooks folder on each system individually. Make sure
# its executable: chmod +x post-checkout.
#
# Note: Fresh clones, forks and checkouts will need to have gulp run
# manually (this hook won't do it).
#
# @dbsinteractive 2016-12-21
#
#######################################################################


# Have to do this. See http://stackoverflow.com/questions/4043609
unset GIT_DIR

echo "Running hook for gulp tasks..."
cd $(git rev-parse --show-toplevel)
dir=$(dirname `find . -maxdepth 4 -name gulpfile.js`)
cd $dir || exit 1

echo "Running hook for gulp tasks..."


# Files that have been changed as a result of this change
# Not that this isn't accurate if you are checking out a file that wasn't
# being tracked by git.
changed_files=$(git diff-tree -r --name-only --no-commit-id HEAD@{1} HEAD)

git diff-tree -r --name-only --no-commit-id HEAD@{1} HEAD

# args to pass to gulp (tasks to run)
args=''

# Check if js files have been changed
if [[ $changed_files == *"/library/js/"* ]] ; then
    args=$args" js"
	echo "Javascript files changed. Recompiling javascript..."
fi

# Check if sass files have been changed
if [[ $changed_files == *"/library/scss/"* ]] ; then
    args=$args" sass"
	echo "SASS files changed. Recompiling sass..."
fi

# Check if sass files have been changed
if [[ $changed_files == *"/library/icons/"* ]] ; then
    args=$args" icons"
	echo "Grunt Icons updated. Rerunning 'gulp icons'..."
fi


# Run gulp if we have arguments
if [[ $args != '' ]] ; then
	gulp $args

	# If we are on the master branch, assume we are live and warn to clear the cache
	if [[ $(git rev-parse --abbrev-ref HEAD) =~ "master" ]] ; then
		printf "\n\n[\e[0;31mWARN\e[m] \e[0;31m!!!\e[m You may need to clear the cache before changes are visible. \e[0;31m!!!\e[m\n\n"
	fi
fi
